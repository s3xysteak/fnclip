import type { PackageJson } from 'pkg-types'
import type { FnclipOptions } from '../cli/options'
import * as pkg from 'empathic/package'
import fs from 'fs-extra'
import * as path from 'pathe'
import { fnclipPath } from '..'

export * from './fnclip/index'

export async function getMeta() {
  const res: Record<string, string> = await fs.readJson(path.join(fnclipPath, 'funcs-meta.json'))
  return res
}

export function ensureExt(fullname: string, ext: string) {
  return path.extname(fullname) ? fullname : `${fullname}${ext}`
}

export async function isTypescript(cwd: string) {
  const packageJsonPath = pkg.up({ cwd })
  if (!packageJsonPath)
    return

  const obj: PackageJson = await fs.readJson(packageJsonPath)
  return !!(obj.dependencies?.typescript || obj.devDependencies?.typescript)
}

const exportContent = (to: string) => `export * from '${to}';`
export async function updateIndex(opts: FnclipOptions, dry = false) {
  if (!opts.index)
    return

  const meta = await getMeta()
  const metaSet = new Set(Object.keys(meta))
  const dirPath = path.join(opts.cwd, opts.dir)
  const indexPathMaybeExt = path.join(opts.cwd, opts.indexPath)

  // check exist index file
  let indexRealPath: string
  for (const ext of ['.ts', '.js']) {
    const targetPath = ensureExt(indexPathMaybeExt, ext)
    if (await fs.exists(targetPath)) {
      indexRealPath = targetPath
      break
    }
  }

  indexRealPath ??= ensureExt(indexPathMaybeExt, (opts.ts ? '.ts' : '.js'))
  await fs.ensureFile(indexRealPath)

  const funcs = [...new Set(
    (await fs.readdir(dirPath)).map(name => name.replace(/\.(?:js|ts|d\.ts)$/, '')),
  )]
  dry || await fs.writeFile(indexRealPath, addIgnoreToContent(
    funcs
      .filter(func => metaSet.has(func))
      .map(name => exportContent(relativeImportPath(
        path.dirname(indexRealPath),
        path.join(dirPath, name),
      )))
      .join('\n'),
  ))
}

export function addIgnoreToContent(content: string) {
  const comments = `/* eslint-disable */
// @ts-nocheck
/* Generated by fnclip - https://github.com/s3xysteak/fnclip */

`
  return content.includes(comments) ? content : comments + content
}

export function relativeImportPath(from: string, to: string) {
  const rel = path.relative(from, to)
  return rel.startsWith('.') ? rel : `./${rel}`
}
